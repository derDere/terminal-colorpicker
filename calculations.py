""" This module provides functions to calculate color values and ranges for color pickers.
"""

# Constants
from constants import RGB_COLOR_COUNT, RGB_COLOR_START, RGB_MAX_VALUE, RGB_MIN_VALUE, RGB_SKIP_BLACK, RGB_SKIP_WHITE


def brightness_range(full_color_range:int=RGB_COLOR_COUNT, skip_black:bool=RGB_SKIP_BLACK, skip_white:bool=RGB_SKIP_WHITE):
  """Generates a range of brightness values for the color picker.
  The range will give a list of tuples with two float values each between 0.0 and 1.0.
  The first value being the dim-multiplier and the second value being the bright-multiplier.
  For the first {full_color_range} values the dim-multiplier will be increased by 1/{full_color_range-1} and the bright-multiplier will be 0.
  After that the next {full_color_range - 1} values will have the dim-multiplier at 1 and the bright-multiplier will be increased by 1/{full_color_range-1}.
  if skip_black is True, the first value will be skipped. This is default because black is already in the basic colors.
  if skip_white is True, the last value will be skipped. This is default because white is already in the basic colors.

  This range will allow the user to generate a color gradient from black to any color to white.

  For that the dim-multiplier will be used to darken the color by simply multiplying the color value with the dim-multiplier.
  RGB = (RGB * dim-multiplier)

  The bright-multiplier will be used to brighten the color by multiplying the delta to the colors maximum value with the bright-multiplier and adding it to the color value.
  RGB = RGB + ((RGB_MAX - RGB) * bright-multiplier)

  The resulting formula will be:
  RGB = (RGB * dim-multiplier) + ((RGB_MAX - RGB) * bright-multiplier)

  You can calculate each channel by using the brightness function!!!!!!!!!!

  Example:
  Here is an example bases on the 256-color range where each channel has 6 values (0-5) and the maximum value is 5.
  We will call the dim-multiplier = dm and the bright-multiplier = bm.

  RGB_MAX = 5
  R = 3, G = 2, B = 1
  dm = 1, bm = 0.5

  R = brightness(R, dm, bm) # Same as: (R * dm) + ((RGB_MAX - R) * bm)
  G = brightness(G, dm, bm) # Same as: (G * dm) + ((RGB_MAX - G) * bm)
  B = brightness(B, dm, bm) # Same as: (B * dm) + ((RGB_MAX - B) * bm)

  Color = (R, G, B)

  Args:
    full_color_range:int: The number of values for each color channel. Default is 6 for the 256-color range (8bit) used in terminals. Set this to 256 to use the full 24bit color range.

  Returns:
    A range of brightness values as tuples. (dim-multiplier:float, bright-multiplier:float)
  """
  m1, m2 = 0, 0
  max_value = full_color_range - 1
  start = 0
  if skip_black:
    start = 1
  for i in range(start, full_color_range): # if skip_black: skip the first one because black is already in the basic colors
    m1 = i / max_value
    yield m1, m2
  end = 0
  if skip_white:
    end = 1
  for i in range(1, full_color_range - end): # if skip_white: skip the last one because white is already in the basic colors
    m2 = i / max_value
    yield m1, m2


def color_range(max_value:int=RGB_MAX_VALUE, min_value:int=RGB_MIN_VALUE, yield_end:bool=True):
  """Generates a range of color values representing a gradient over all colors.
  The range will give a list of tuples with three values for REG, GREEN and BLUE.
  The gradient will start at Red and go through all colors to Red again. (Red -> Yellow -> Green -> Cyan -> Blue -> Magenta -> Red)
  The gradient will be generated by increasing the color value for the next channel by 1 and decreasing the color value for the previous channel by 1.
  This will result in a smooth gradient from one color to the next.
  This color range can be used cross with the brightness_range to generate a color gradient from black to any color to white displaying all colors in between in a field for a color picker.

  If the min value is 0 and the max value is 5 this steps would look like this:
  1. Red: (5, 0, 0)
  2. Increasing Green to Yellow
  3. Yellow: (5, 5, 0)
  4. Decreasing Red to Green
  5. Green: (0, 5, 0)
  6. Increasing Blue to Cyan
  7. Cyan: (0, 5, 5)
  8. Decreasing Green to Blue
  9. Blue: (0, 0, 5)
  10. Increasing Red to Magenta
  11. Magenta: (5, 0, 5)
  12. Decreasing Blue to Red
  13. Red: (5, 0, 0)

  If yield_end is True, the last color (which is the same as the first color) will be yielded as well to close the loop.

  This range is by default set to the 256-color range (8bit) where each channel has 6 values (0-5) and the maximum value is 5.
  You can pass a max_value of 255 to use the full 24bit color range. However, this will also increase the length of the range.

  Args:
    max_value:int: The maximum value for each color channel. Default is 5 for the 256-color range (8bit) used in terminals. Set this to 255 to use the full 24bit color range.
    min_value:int: The minimum value for each color channel. Default is 0.
    yield_end:bool: If True, the last color (which is the same as the first color) will be yielded as well to close the loop.

  Returns:
    A range of color values as tuples. (Red, Green, Blue)
  """
  r, g, b = max_value, min_value, min_value
  for _ in range(max_value):
    yield r, g, b
    g += 1
  for _ in range(max_value):
    yield r, g, b
    r -= 1
  for _ in range(max_value):
    yield r, g, b
    b += 1
  for _ in range(max_value):
    yield r, g, b
    g -= 1
  for _ in range(max_value):
    yield r, g, b
    r += 1
  for _ in range(max_value):
    yield r, g, b
    b -= 1
  if yield_end:
    yield r, g, b


def brightness(value:int, dim_multiplier:float, bright_multiplier:float, max_value:int=RGB_MAX_VALUE):
  """Calculates the brightness of a color value.
  The brightness of a color value can be calculated by using the dim-multiplier and the bright-multiplier.
  The dim-multiplier will be used to darken the color by simply multiplying the color value with the dim-multiplier.
  RGB = (RGB * dim-multiplier)

  The bright-multiplier will be used to brighten the color by multiplying the delta to the colors maximum value with the bright-multiplier and adding it to the color value.
  RGB = RGB + ((RGB_MAX - RGB) * bright-multiplier)

  The resulting formula will be:
  RGB = (RGB * dim-multiplier) + ((RGB_MAX - RGB) * bright-multiplier)

  Args:
    value: The value of the color channel. (Red, Green, Blue)
    dim_multiplier: The dim-multiplier to darken the color. (0.0 - 1.0)
    bright_multiplier: The bright-multiplier to brighten the color. (0.0 - 1.0)
    max_value: The maximum value for the color channel. Default is 5 for the 256-color range (8bit) used in terminals. Set this to 255 to use the full 24bit color range.

  Returns:
    The color value with the given brightness.
  """
  return int(dim_multiplier * value) + int(bright_multiplier * (max_value - value))


def calc_color_256(r:int, g:int, b: int):
  """Calculates the color value for the 256-color range using the RGB channels.
  Based of the 256-color range where each channel has 6 values (0-5) and the maximum value is 5.
  The resulting color value will be an integer between 16 and 231 and can be used in any ncurse application using the 256-color mode.

  Values:
    BasicColorCount (bcc) = 16
    RGBColorBase (rcb) = 6
    Red (r), Green (g), Blue (b)

  Formula:
    color_value = bcc + ((rcb^2) * r) + (rcb * g) + b

  Example:
    R = 3, G = 2, B = 1
    color_value = 16 + ((6^2) * 3) + (6 * 2) + 1
    color_value = 16 + (36 * 3) + 12 + 1
    color_value = 16 + 108 + 12 + 1
    color_value = 137

  Args:
    r (int): The value of the red channel. (0-5)
    g (int): The value of the green channel (0-5)
    b (int): The value of the blue channel (0-5)

  Returns:
    int: The color value for the 256-color range based on the RGB channels. (16-231)
  """
  color = int(RGB_COLOR_START + (RGB_COLOR_COUNT**2) * r + RGB_COLOR_COUNT * g + b)
  return color
